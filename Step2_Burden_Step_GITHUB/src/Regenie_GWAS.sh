#!/bin/bash
# Regenie_GWAS 0.0.01
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {
    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    project="project-G6F22pjJZ8kxK7ZY291Kv225"


    echo "Downloading necessary files"
    download_files 
    echo "Setting up environment"
    setup
    echo "Setting up masks"
    mask_setup
    echo "Setting up conditional files"
    conditional_lists
    echo "Running aggregates adjusted for common variants"
    run_first_regenie
    if [ ${n_sig_sets} -gt 0 ];then
	run_significant_hits_again
    fi 
    
    dx upload ${outputdir}/*.regenie --path ${project}:WGS_Analysis/${outputdir}/
    dx upload ${outputdir}/*.log --path ${project}:WGS_Analysis/${outputdir}/
    #### Nonsense output 
    dx-jobutil-add-output output "$output" --class=string

}


run_first_regenie() {

    # run regenie using xargs to run 2 jobs at once
    com=""
    if [ ${n_reg_sets} -gt 0 ];then
      com="${com} $Phenotype $catvars $outputdir ${chr} $n_conditional_snps masks_1_chr_${chr} annotations_regulatory_chr${chr} 0.001 $invnorm common $type ${chunk_start}_${chunk_end}"
    fi
    if [ ${n_cod_sets} -gt 0 ];then
      com="${com} $Phenotype $catvars $outputdir ${chr} $n_conditional_snps masks_2_chr_${chr} annotations_coding_proximal_chr${chr} 0.001 $invnorm common $type ${chunk_start}_${chunk_end}"
    fi
    echo ${com}
    echo $com | xargs -n 12 -P 2 bash -c 'bash run_step2_regenie.sh "$@"' _


    grep -v -h --no-filename '#' ${outputdir}/*.regenie | awk '$12>=7 {print}' |  cut -d' ' -f3 | cut -f'.' -f1 | cat > sets_for_second_round 
    cat sets_for_second_round <(echo "second_round") > sets_for_second_round_count
    
    n_sig_sets=`wc -l sets_for_second_round_count | cut -d' ' -f1`
    n_sig_sets=$((${n_sig_sets}-1))

    if [ ${n_sig_sets} -gt 0 ];then
	grep -wf sets_for_second_round set_list_temp | cat > set_list_temp_mv
        mv set_list_temp_mv set_list_temp
    fi 


}


run_significant_hits_again() {


# run regenie using xargs to run 2 jobs at once
    com=""
    if [ ${n_reg_sets} -gt 0 ];then
      com="${com} $Phenotype $catvars $outputdir ${chr} 0 masks_1_chr_${chr} annotations_regulatory_chr${chr} 0.001 $invnorm No $type ${chunk_start}_${chunk_end}"
      com="${com} $Phenotype $catvars $outputdir ${chr} $n_conditional_snps_all masks_1_chr_${chr} annotations_regulatory_chr${chr} 0.001 $invnorm all $type ${chunk_start}_${chunk_end}"
    fi
    if [ ${n_cod_sets} -gt 0 ];then
      com="${com} $Phenotype $catvars $outputdir ${chr} 0 masks_2_chr_${chr} annotations_coding_proximal_chr${chr} 0.001 $invnorm No $type ${chunk_start}_${chunk_end}"
      com="${com} $Phenotype $catvars $outputdir ${chr} $n_conditional_snps_all masks_2_chr_${chr} annotations_coding_proximal_chr${chr} 0.001 $invnorm all $type ${chunk_start}_${chunk_end}"
    fi
    echo ${com}
    echo $com | xargs -n 12 -P 2 bash -c 'bash run_step2_regenie.sh "$@"' _

}

download_files() {
  #### Download input files
  dx download "$Covariate_TSV" -o Covariate_TSV.gz
  dx download "$Phenotype_TSV" -o Phenotype_TSV.gz
  if [ -z ${conditional+x} ];then # only try to download conditional list if it's been set
    dx download "$conditional" -o conditional_list_common
  else
    touch conditional_list_common
  fi

  #### Unzip Pheno and Covar Files
  gunzip Covariate_TSV.gz
  sed -i 's/\.b/NA/g' Covariate_TSV
  gunzip Phenotype_TSV.gz
  sed -i 's/\.b/NA/g' Phenotype_TSV

  Phenotype=$(awk 'NR == 1 {print $3}' Phenotype_TSV)
  echo ${Phenotype}

  #### Download the chromosome file
  dx download ${project}":/wgs_500k_pgen_files/chr${chr}_merged.*"

  ###Download Annotations and Masks
  dx download ${project}:/wgs_500k_masks/annotations_regulatory_chr${chr}
  dx download ${project}:/wgs_500k_masks/annotations_coding_proximal_chr${chr}
  dx download ${project}:/wgs_500k_masks/set_list_chr${chr}.txt
  dx download ${project}:/wgs_500k_masks/masks_1_chr_${chr}
  dx download ${project}:/wgs_500k_masks/masks_2_chr_${chr}

  #### Windows files
  custom=windows
  dx download ${project}:/wgs_500k_masks/${custom}/${custom}_annotations_regulatory_chr${chr}
  dx download ${project}:/wgs_500k_masks/${custom}/${custom}_set_list_chr${chr}.txt
  dx download ${project}:/wgs_500k_masks/${custom}/${custom}_mask

  # download step 1 files
  dx download ${project}:/step1_files/${Phenotype}* --overwrite
  mv ${Phenotype}_Step1_${type}_${invnorm}.loco ${Phenotype}_Step1_1.loco
  mv ${Phenotype}_Step1_${type}_${invnorm}.list ${Phenotype}_Step1_pred.list
}

mask_setup() {

  # combine windows and regulatory masks
  cat ${custom}_annotations_regulatory_chr${chr} annotations_regulatory_chr${chr} > annotations_regulatory_chr${chr}_2
  # subset to only those units which start within the asked for range
  cat ${custom}_set_list_chr${chr}.txt set_list_chr${chr}.txt | awk -v chr=${chr} -v start=${chr_start} -v end=${chr_end} '$2==chr && $3>=start && $3<=end' > set_list_temp
  cat masks_1_chr_${chr} ${custom}_mask > masks_cat
  mv masks_cat masks_1_chr_${chr}
  mv annotations_regulatory_chr${chr}_2 annotations_regulatory_chr${chr}

  cat annotations_regulatory_chr${chr} annotations_coding_proximal_chr${chr} > annotations_all
  awk '{print $1}' set_list_temp > set_lists_included
  grep -w -f set_lists_included annotations_all | awk '{print $1}' > variants_to_include_masks

  # count total number of sets to run
  n_sets_all=`wc -l set_list_temp | cut -d' ' -f1`

  # separate regulatory and sliding windows from other sets and count them as regenie can only run a maximum number at once, and will fail if there's not at least one mask
  grep -E 'regulatory|sliding' set_list_temp | cat > set_list_only_reg
  echo "reg sets" >> set_list_only_reg
  n_reg_sets=`wc -l set_list_only_reg | cut -d' ' -f1`
  n_reg_sets=$((${n_reg_sets}-1))

  echo $((${n_reg_sets})) " regulatory and sliding window masks"

  grep -E -v 'regulatory|sliding' set_list_temp | cat > set_list_not_reg
  echo "nonreg sets" >> set_list_not_reg
  n_nonreg_sets=`wc -l set_list_not_reg | cut -d' ' -f1`
  n_nonreg_sets=$((${n_nonreg_sets}-1))

  echo $((${n_nonreg_sets})) " coding and proximal-regulatory window masks"

}


setup() {
  #### Make executables work
  chmod 777 *

  #### Make output directory 
  if [ $type == "Continuous" ];then
    if [ "${invnorm}" == "Yes" ];then
      outputdir=${Phenotype}_raw_sin_burden_wgs
	  else
	    outputdir=${Phenotype}_raw_burden_wgs
	  fi
  else
    outputdir=${Phenotype}_binary_burden_wgs
  fi
  outputdir_single_var=${outputdir}"/single_variant/
  outputdir=${outputdir}"/burden/"
  mkdir -p $outputdir
  dx mkdir -p ${project}:WGS_Analysis/${outputdir}
}





conditional_lists() {

  #Download Conditional List
  dx download ${project}:/WGS_results/${outputdir_single_var}/${Phenotype}_cojo_full_chr${chr}_cojo* --overwrite
  
  touch ${Phenotype}_cojo.joint_snps.delete
  if [ ! -f ${Phenotype}_cojo_full_chr${chr}_cojo.jma.cojo ]; then
  	mv ${Phenotype}_cojo.joint_snps.delete ${Phenotype}_cojo_full_chr${chr}_cojo.jma.cojo
  fi
  grep -v 'Chr' ${Phenotype}_cojo_full_chr${chr}_cojo.jma.cojo | awk '$5>=0.01 {print $2}' | cat >> conditional_list_common

  # count number of variants asked to condition on and build list for regenie
    grep "chr${chr}:" conditional_list_common | cat > conditional_list_local

    echo "conditional" >> conditional_list_local
    n_conditional_snps=`wc -l conditional_list_local | cut -d' ' -f1`
    n_conditional_snps=$((${n_conditional_snps}-1))
    grep -wv "conditional" conditional_list_local | cat > conditional_list_local_mv
    mv conditional_list_local_mv conditional_list_local

  # count total number of conditional SNPs including single variants from WGS GWAS

  cat <(awk '{print $2}' ${Phenotype}_cojo_full_chr${chr}_cojo.jma.cojo | grep -v 'Chr' | cat) <(conditional_list_local) | sort -k1 | uniq | cat > conditional_list_final_temp
  grep "chr${chr}:" conditional_list_final_temp > conditional_list_final
  
  cat conditional_list_final <(echo "conditional") > conditional_list_final_count
  n_conditional_snps_all=`wc -l conditional_list_final_count | cut -d' ' -f1`
  n_conditional_snps_all=$((${n_conditional_snps_all} 
  

  #Make master list of variants to include in plink file
  cat variants_to_include_masks conditional_list_final > variants_to_include

  # Make a subset plink file to enable parallel processing
  ./plink2 --pfile chr${chr}_trimmed_merged --extract variants_to_include --make-pgen --double-id --out chr${chr}_for_regenie
}